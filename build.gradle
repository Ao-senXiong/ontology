/// Why doesn't this work on Travis under Java 7?
/// The same text does in Randoop's build.gradle file.
// plugins {
//   /*
//    * Plugin that applies Google-Java-format to the Java files in the project.
//    * https://github.com/sherter/google-java-format-gradle-plugin
//    */
//   id 'com.github.sherter.google-java-format' version '0.6'
// }
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

apply plugin: 'java'

ext {
    assert JavaVersion.current() == JavaVersion.VERSION_1_8: "Set JAVA_HOME to JDK 8. Current version is ${JavaVersion.current()}"
    jsr308 = System.getenv('JSR308') ?: file(new File("..")).absolutePath
    cfPath = "${jsr308}/checker-framework"
    cfiPath = "${jsr308}/checker-framework-inference"
    afu = "${jsr308}/annotation-tools/annotation-file-utilities"
    ontologyDir = "${jsr308}/ontology"
}

println '===================================='
println '         Ontology Checker           '
println '===================================='
println ''
println '-------------------------------'
println 'Important Environment Variables'
println '-------------------------------'
println 'JSR308: ' + jsr308
println 'CF:     ' + cfPath
println 'CFI:    ' + cfiPath

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile fileTree(dir: "${cfPath}/checker/dist", include: "checker.jar")
    compile fileTree(dir: "${cfiPath}/dist", include: "checker-framework-inference.jar")
    // sat4j solver dependency
    compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.4'
    compile 'org.ow2.sat4j:org.ow2.sat4j.maxsat:2.3.4'
    // z3 solver dependency
    compile fileTree(dir: "${cfiPath}/lib", include: "com.microsoft.z3.jar")

    // CF test lib dependency
    testCompile fileTree(dir: "${cfPath}/util/build/libs", include: "testlib-*.jar")
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }

        resources {
            srcDirs = ["src"]
        }
    }

    test {
        java {
            // TODO: we shouldn't need source level dependency on CFITest
            srcDirs = ["tests", "${cfiPath}/tests/checkers/inference/test"]
        }
    }
}

test {
    systemProperties 'path.afu.scripts': "${afu}/scripts",
            'path.inference.script': "${cfiPath}/scripts/inference",
            'use.hacks': true,
            JDK_JAR: "${cfPath}/checker/dist/jdk8.jar"

    environment "external_checker_classpath", "${ontologyDir}/build/classes/java/main"

    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }
        // The following prints out each time a test is passed.
        // events "passed", "skipped", "failed", "standardOut", "standardError"

        // Show the found unexpected diagnostics and expected diagnostics not found.
        exceptionFormat "full"
    }

    // After each test, print a summary.
    afterSuite { desc, result ->
        if (desc.getClassName() != null) {
            long mils = result.getEndTime() - result.getStartTime()
            double seconds = mils / 1000.0

            println "Testsuite: ${desc.getClassName()}\n" +
                    "Tests run: ${result.testCount}, " +
                    "Failures: ${result.failedTestCount}, " +
                    "Skipped: ${result.skippedTestCount}, " +
                    "Time elapsed: ${seconds} sec\n"
        }

    }
}

compileJava {
    options.compilerArgs = [
            '-implicit:class',
            '-Awarns',
            '-Xmaxwarns', '10000',
    ]
}

tasks.clean {
    delete += "build"
    delete += "dist"
    delete += "testdata"
}

/// Commented out because plugins section is commented out
// /* Configuration for formatting */
// googleJavaFormat {
//   // toolVersion '1.3'
//   options style: 'AOSP'
// }
// tasks.googleJavaFormat {
//   group 'Formatting'
//   description = "Reformat Java source code with Google-Java-format"
//   exclude 'testing'
//   exclude 'testinputs'
// }
// tasks.verifyGoogleJavaFormat {
//   group 'Formatting'
//   description = "Check Java source code is in Google-Java-format"
//   exclude 'testing'
//   exclude 'testinputs'
// }
